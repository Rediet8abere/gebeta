{"version":3,"sources":["Board/Board.js","App.js","index.js"],"names":["players","holes","0","1","banks","h","role","2","3","4","5","6","7","8","9","10","11","12","13","14","all_holes","Array","keys","holeStyle","padding","margin","bankStyle","Turn","props","className","turn","Bank","index","style","marbles","Hole","onClick","handleClick","bind","this","Board","start","state","hand","reset_board","scoop","i","hand_keeper","holes_copy","drop","count","drop_all","at_bank","fill","marbles_per_hole","done","isDropping","opp_turn","JSON","parse","stringify","isTesting","turn_keeper","renderTurn","renderBank","renderHole","last_hole","possible","k","length","push","move_list","pmc","possible_moves_choice","completed_list","recurse_moves","cur_hole","hand_count","next_hole","setState","is_ownbank","board_copy","make_move_choice","aval_holes","next_visit","concat","move","depth","alpha","beta","maximazing_player","is_over","score","max_score","Number","NEGATIVE_INFINITY","play_move","opp_moves","possible_moves","eval_score","minimax","Math","max","min_score","POSITIVE_INFINITY","ai_moves","j","min","poss_moves","floor","random","ai_move","get_move","console","log","moves","setTimeout","make_move","has_marbles","playing","React","Component","App","src","process","alt","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d0d874b.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.css'\n\nconst player = 0\nconst ai = 1\n\nconst players = [player, ai]\n\nconst holes = {\n      0 : [1, 2, 3, 4, 5, 6],\n      1 : [8, 9, 10, 11, 12, 13]\n}\n\nconst banks = {\n      0: 7,\n      1: 14\n}\n\n// const owner = 0\n// var next = 1;\n// const role = 2\n\nconst h = {\n      1: { \"owner\" : 0, \"next\" : { 0 : 2, 1 : 2}, role : \"hole\", \"oop\": 13, \"distobank\":  { 0: 6, 1: 12}},\n      2: { \"owner\" : 0, \"next\" : { 0 : 3, 1 : 3}, role : \"hole\", \"oop\": 12, \"distobank\":  { 0: 5, 1: 11}},\n      3: { \"owner\" : 0, \"next\" : { 0 : 4, 1 : 4}, role : \"hole\", \"oop\": 11, \"distobank\":  { 0: 4, 1: 10}},\n      4: { \"owner\" : 0, \"next\" : { 0 : 5, 1 : 5}, role : \"hole\", \"oop\": 10, \"distobank\":  { 0: 3, 1: 9}},\n      5: { \"owner\" : 0, \"next\" : { 0 : 6, 1 : 6}, role : \"hole\", \"oop\": 9, \"distobank\":  { 0: 2, 1: 8}},\n      6: { \"owner\" : 0, \"next\" : { 0 : 7, 1 : 7}, role : \"hole\", \"oop\": 8, \"distobank\":  { 0: 1, 1: 6}},\n      7: { \"owner\" : 0, \"next\" : { 0 : 8, 1 : 8}, role : \"bank\", \"oop\": null, \"distobank\": null},\n      8: { \"owner\" : 1, \"next\" : { 0 : 9, 1 : 9}, role : \"hole\", \"oop\": 6, \"distobank\":  { 0: 12, 1: 6}},\n      9: { \"owner\" : 1, \"next\" : { 0 : 10, 1 : 10}, role : \"hole\", \"oop\": 5, \"distobank\":  { 0: 11, 1: 5}},\n      10: { \"owner\" : 1, \"next\" : { 0 : 11, 1 : 11}, role : \"hole\", \"oop\": 4, \"distobank\":  { 0: 10, 1: 4}},\n      11: { \"owner\" : 1, \"next\" : { 0 : 12, 1 : 12}, role : \"hole\", \"oop\": 3, \"distobank\":  { 0: 9, 1: 3}},\n      12: { \"owner\" : 1, \"next\" : { 0 : 13, 1 : 13}, role : \"hole\", \"oop\": 2, \"distobank\":  { 0: 8, 1: 2}},\n      13: { \"owner\" : 1, \"next\" : { 0 : 14, 1 : 14}, role : \"hole\", \"oop\": 1, \"distobank\":  { 0: 7, 1: 1}},\n      14: { \"owner\" : 1, \"next\" : { 0 : 1, 1 : 1}, role : \"bank\", \"oop\": null, \"distobank\": null }\n}\n\n// do +1\nconst all_holes = [...Array(15).keys()];\n\nconst holeStyle = {\n  padding: \"15px\",\n  margin: \"4px\",\n};\n\nconst bankStyle = {\n  padding: \"50px\",\n  margin: \"4px\",\n}\n\nfunction Turn(props) {\n  return (\n    <div className=\"turn-keeper\">\n      <h5>Turn keeper: {props.turn}</h5>\n    </div>\n  );\n}\n\nfunction Bank(props) {\n  return (\n    <div>\n      <h5>{props.index}</h5>\n      <button style={bankStyle} className=\"bank\">{props.marbles}</button>\n    </div>\n  );\n}\n\nfunction Hole(props) {\n  if (props.index <= 6) {\n    return (\n      <div>\n      <button style={holeStyle} className=\"hole\" onClick={props.handleClick.bind(this, props.index)}>{props.marbles}</button>\n      <h5>{props.index}</h5>\n      </div>\n    );\n  } else if (6 < props.index < 14) {\n      return (\n        <div>\n        <h5>{props.index}</h5>\n        <button style={holeStyle} className=\"hole\" onClick={props.handleClick.bind(this, props.index)}>{props.marbles}</button>\n        </div>\n      );\n    }\n}\n\n\n\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holes: Array(15).fill(0),\n      marbles_per_hole: 4,\n      hand: 48,\n      done: false,\n      isDropping: false,\n    };\n    this.turn = player\n    this.opp_turn = ai\n    this.holes_copy = JSON.parse(JSON.stringify(this.state.holes));\n    // [...this.state.holes]\n    // .slice(0)\n\n    this.hand_keeper = 48\n    this.reset_board = this.reset_board.bind(this);\n    this.isTesting = true\n\n  }\n\n  renderTurn() {\n    let turn_keeper = \"User\"\n    if (this.turn === ai) {\n      turn_keeper = \"AI\"\n    } else {\n      turn_keeper = \"User\"\n    }\n    return (\n      <Turn turn={turn_keeper} />\n    );\n  }\n\n  renderHole(i) {\n    return (\n      <Hole index={i} marbles={this.state.holes[i]} handleClick={ () => {\n        this.handleClick(i)\n      }}/>\n    );\n  }\n\n  renderBank(i) {\n    return (\n      <Bank index={i} marbles={this.state.holes[i]} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"gebeta-board\">\n\n        <button className=\"start-btn\" onClick={this.start}>Start Game</button>\n        {this.renderTurn()}\n        <div className=\"ai-bank\">\n          {this.renderBank(14)}\n        </div>\n\n        <div className=\"board-r1-r2\">\n          <div className=\"board-row2\">\n          {this.renderHole(13)}\n          {this.renderHole(12)}\n          {this.renderHole(11)}\n          {this.renderHole(10)}\n          {this.renderHole(9)}\n          {this.renderHole(8)}\n          </div>\n\n           <div className=\"board-row1\">\n             {this.renderHole(1)}\n             {this.renderHole(2)}\n             {this.renderHole(3)}\n             {this.renderHole(4)}\n             {this.renderHole(5)}\n             {this.renderHole(6)}\n           </div>\n         </div>\n         <div className=\"player-bank\">\n          {this.renderBank(7)}\n         </div>\n\n      </div>\n    );\n  }\n\n\n  is_ownbank(last_hole) {\n    let count = this.holes_copy[last_hole] % 13\n    return count === h[last_hole][\"distobank\"][this.turn]\n  }\n\n\n  possible_moves_choice() {\n    let possible = []\n    for (var k = 0; k < holes[this.turn].length; k += 1) {\n      if (this.holes_copy[holes[this.turn][k]]!== 0) {\n        possible.push(holes[this.turn][k])\n      }\n    }\n    return possible\n  }\n\n  possible_moves() {\n\n    let move_list = []\n    let pmc = this.possible_moves_choice()\n    for (var i = 0; i < pmc.length; i += 1 ) {\n      move_list.push([pmc[i]])\n    }\n\n    let completed_list = []\n\n    this.recurse_moves(move_list, completed_list)\n\n\n    return completed_list\n  }\n\n  make_move_choice(i) {\n\n    this.scoop(i)\n    // console.log(\"-----------make move choice-----------------\");\n    // console.log(\"this.state.holes\");\n    // console.log(this.state.holes);\n    // console.log(\"holes_copy\");\n    // console.log(this.holes_copy);\n    // console.log(\"-----------make move choice-----------------\");\n    let cur_hole = i\n    let hand_count = this.hand_keeper\n    for (let k = 0; k < hand_count; k += 1) {\n      const next_hole = h[cur_hole][\"next\"][this.turn]\n      this.drop(next_hole, 1)\n      cur_hole = next_hole\n    }\n\n    if (this.state.holes[cur_hole] === 1 && (cur_hole !== (banks[player] || banks[ai]))) {\n        if (h[cur_hole][\"owner\"] === this.turn ) {\n          if (h[cur_hole][\"oop\"] !== 0) {\n            this.scoop(cur_hole)\n            this.scoop(h[cur_hole][\"oop\"])\n            this.drop_all(banks[player])\n          }\n        }\n    }\n    // console.log(\"**************make_move_choice****************\");\n    // console.log(\"this.state.holes\");\n    // console.log(this.state.holes);\n    // console.log(\"holes_copy\");\n    // console.log(this.holes_copy);\n    // console.log(\"**************make_move_choice****************\");\n    // console.log(\"testing should be true if turn is ai\", this.isTesting, this.turn === ai);\n    if (!(this.isTesting)) {\n      this.setState({ holes: [...this.holes_copy] })\n    }\n\n  }\n\n  recurse_moves(move_list, completed_list) {\n\n    for (var i = 0; i < move_list.length; i += 1) {\n      let last_hole = move_list[i][move_list[i].length-1]\n\n      if (this.is_ownbank(last_hole)) {\n        const board_copy = [...this.holes_copy]\n        this.make_move_choice(last_hole)\n\n        const aval_holes = this.possible_moves_choice()\n\n        if (aval_holes.length !== 0) {\n          let next_visit = []\n          for (var k = 0; k < aval_holes.length; k += 1) {\n            next_visit.push(move_list[i].concat(aval_holes[k]) )\n          }\n          this.recurse_moves(next_visit, completed_list)\n        } else {\n          completed_list.push(move_list[i])\n        }\n        this.holes_copy = [...board_copy]\n        // this.setState({ holes: this.holes_copy })\n      } else {\n        completed_list.push(move_list[i])\n      }\n    }\n    // if (this.turn === player) {\n    //   this.setState({ holes: this.holes_copy })\n    // }\n  }\n\n\n\n  start = () => {\n    if (this.state.hand !== 0) {\n      this.reset_board()\n    }\n  }\n\n\n\n  minimax(move, depth, alpha, beta, maximazing_player) {\n    if (depth === 0 || this.is_over()) {\n      return this.score()\n    }\n\n    if (maximazing_player === true) {\n      let max_score = Number.NEGATIVE_INFINITY\n      this.play_move(move, true)\n      this.turn = player\n      this.opp_turn = ai\n      let opp_moves = this.possible_moves()\n      let board_copy = [...this.holes_copy]\n      for (let i = 0; i < opp_moves.length; i += 1) {\n        let eval_score = this.minimax(opp_moves[i], depth-1, alpha, beta, false)\n        this.holes_copy = [...board_copy]\n        this.turn = player\n        this.opp_turn = ai\n        max_score = Math.max(eval_score, max_score)\n        alpha = Math.max(alpha, eval_score)\n        if (beta <= alpha) {\n          break\n        }\n      }\n    return max_score\n\n    } else if (maximazing_player === false) {\n      let min_score = Number.POSITIVE_INFINITY\n      this.play_move(move, true)\n      this.turn = ai\n      this.opp_turn = player\n      let ai_moves = this.possible_moves()\n      let board_copy = [...this.holes_copy]\n      for (var j = 0; j < ai_moves.length; j += 1) {\n        let eval_score = this.minimax(ai_moves[j], depth-1, alpha, beta, true)\n        this.holes_copy = [...board_copy]\n        this.turn = ai\n        this.opp_turn = player\n        min_score = Math.min(min_score, eval_score)\n        beta = Math.min(beta, eval_score)\n        if (beta <= alpha) {\n          break\n        }\n      }\n      return min_score\n    }\n  }\n\n  get_move() {\n    // this.isTesting = true\n    // let best_score = Number.NEGATIVE_INFINITY\n    // let best_move = []\n\n    let poss_moves = this.possible_moves()\n\n    // let board_copy = [...this.holes_copy]\n    //\n    // var count = 0\n    //\n    // for (var i = 0; i < poss_moves.length; i += 1 ) {\n    //   let ai_score = this.minimax(poss_moves[i], 2, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, true)\n    //   this.holes_copy = [...board_copy]\n    //   if (ai_score > best_score) {\n    //     best_move = poss_moves[i]\n    //     best_score = ai_score\n    //   }\n    //\n    //   count += 1\n    //   console.log(\"count\", count);\n    //   if (count === 1) {\n    //     break\n    //   }\n    // }\n    // this.turn = ai\n    // this.opp_turn = player\n    // this.isTesting = true\n    // return best_move\n    return poss_moves[Math.floor(Math.random() * poss_moves.length)]\n\n  }\n\n\n  make_move() {\n    // console.log(\"turn is ai: \", this.turn === ai);\n    this.isTesting = true\n    // not returning optimal move\n    let ai_move = this.get_move()\n    console.log(\">>>>>>>>>>>>>>>>>>>>>>>>ai move: \", ai_move);\n    this.isTesting = false\n    this.play_move(ai_move, true)\n  }\n\n  play_move(moves, done) {\n    if (done) {\n      for (let i = 0; i < moves.length; i += 1) {\n        this.make_move_choice(moves[i])\n      }\n\n      // if player is done making move, give turn to AI\n      if (this.turn === player) {\n        this.turn = ai\n        this.opp_turn = player\n        setTimeout(() => {\n            this.make_move()\n            this.setState({ holes: this.holes_copy })\n          }, 5000);\n      } else {\n        this.turn = player\n        this.opp_turn = ai\n      }\n\n    } else { // player have another turn\n      this.make_move_choice(moves)\n    }\n  }\n\n\n  handleClick(move) {\n    let poss_moves = this.possible_moves()\n    let done = false\n    this.isTesting = false\n    for (var i = 0; i < poss_moves.length; i += 1) {\n      if (move === poss_moves[i][0]) {\n        if (poss_moves[i].length === 1) {\n          done = true\n          this.play_move(poss_moves[i], done)\n        } else if (poss_moves[i].length > 1) {\n          done = false\n          this.play_move(move, done)\n          break\n        }\n      }\n    }\n  }\n\n\n  is_over() {\n    for (var i = 0; i < players.length; i += 1) {\n      let has_marbles = false\n      for (var j = 0; j < holes[player].length; j += 1) {\n        if (this.holes_copy[holes[player][j]] !== 0) {\n          has_marbles = true\n        }\n      }\n      if (has_marbles === false) {\n        return true\n      }\n    }\n    return false\n  }\n\n  score(playing = null) {\n    if (playing === null) {\n      playing = this.turn\n    }\n    if (playing === ai) {\n      this.turn = ai\n      this.opp_turn = player\n    } else if (playing === player) {\n      this.turn = player\n      this.opp_turn = ai\n    }\n    return this.holes_copy[banks[this.turn]] - this.holes_copy[banks[this.opp_turn]]\n  }\n\n  reset_board() {\n    for (let k = 0; k < all_holes.length; k += 1) {\n      if (this.holes_copy[k] !== 0) {\n        this.scoop(k)\n      }\n    }\n\n    for (let j = 0; j < players.length; j += 1) {\n      for (let k = 0; k < holes[players[j]].length; k += 1) {\n        this.drop(holes[players[j]][k], this.state.marbles_per_hole)\n      }\n    }\n\n    this.setState({ holes: [...this.holes_copy], hand: this.hand_keeper })\n\n  }\n\n  scoop = (i) => {\n    this.hand_keeper += this.holes_copy[i]\n    this.holes_copy[i] = 0\n    // console.log(\"**************in scoop****************\");\n    // console.log(\"this.state.holes\");\n    // console.log(this.state.holes);\n    // console.log(\"holes_copy\");\n    // console.log(this.holes_copy);\n    // console.log(\"**************in scoop****************\");\n\n\n  }\n\n  drop = (i, count) => {\n    this.holes_copy[i] += count\n    this.hand_keeper -= count\n  }\n\n  drop_all = (at_bank) => {\n    this.holes_copy[at_bank] += this.hand_keeper\n    this.hand_keeper = 0\n  }\n\n}\n\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img src={process.env.PUBLIC_URL + \"/images/woodBackground.jpeg\"} alt=\"mypic\" width=\"100%\" height=\"100%\"/>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}