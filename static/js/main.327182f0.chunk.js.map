{"version":3,"sources":["Board/Hole.js","Board/Board.js","App.js","index.js"],"names":["Hole","props","index","className","onClick","handleClick","bind","this","marbles","players","holes","0","1","banks","h","role","2","3","4","5","6","7","8","9","10","11","12","13","14","all_holes","Array","keys","bankStyle","padding","margin","Turn","turn","Bank","style","Board","start","state","hand","reset_board","scoop","i","hand_keeper","holes_copy","drop","count","drop_all","at_bank","fill","marbles_per_hole","done","isDropping","opp_turn","JSON","parse","stringify","isTesting","turn_keeper","renderTurn","renderBank","renderHole","last_hole","possible","k","length","push","move_list","pmc","possible_moves_choice","completed_list","recurse_moves","cur_hole","hand_count","next_hole","setState","is_ownbank","board_copy","make_move_choice","aval_holes","next_visit","concat","move","depth","maximazing_player","is_over","score","max_score","Number","NEGATIVE_INFINITY","play_move","opp_moves","possible_moves","eval_score","minimax","Math","max","min_score","POSITIVE_INFINITY","ai_moves","j","min","best_score","best_move","poss_moves","ai_score","ai_move","get_move","moves","alert","setTimeout","make_move","has_marbles","playing","player_score","React","Component","App","src","process","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.327182f0.chunk.js","sourcesContent":["import React from 'react'\nimport './Hole.css'\n\n\n\nfunction Hole(props) {\n  if (props.index <= 6) {\n    return (\n      <div>\n        <button  className=\"hole\" onClick={props.handleClick.bind(this, props.index)}>{props.marbles}</button>\n      </div>\n    );\n  } else if (6 < props.index < 14) {\n      return (\n        <div>\n          <button  className=\"hole\" onClick={props.handleClick.bind(this, props.index)}>{props.marbles}</button>\n        </div>\n      );\n    }\n}\n\nexport default Hole;\n","import React from 'react'\nimport './Board.css'\nimport Hole from './Hole'\n\nconst player = 0\nconst ai = 1\n\nconst players = [player, ai]\n\nconst holes = {\n      0 : [1, 2, 3, 4, 5, 6],\n      1 : [8, 9, 10, 11, 12, 13]\n}\n\nconst banks = {\n      0: 7,\n      1: 14\n}\n\n// const owner = 0\n// var next = 1;\n// const role = 2\n\n// To Do: Let user know when user captures and when AI captures\n//        Let user know if they have another round\n\nconst h = {\n      1: { \"owner\" : 0, \"next\" : { 0 : 2, 1 : 2}, role : \"hole\", \"oop\": 13, \"distobank\":  { 0: 6, 1: 13}},\n      2: { \"owner\" : 0, \"next\" : { 0 : 3, 1 : 3}, role : \"hole\", \"oop\": 12, \"distobank\":  { 0: 5, 1: 12}},\n      3: { \"owner\" : 0, \"next\" : { 0 : 4, 1 : 4}, role : \"hole\", \"oop\": 11, \"distobank\":  { 0: 4, 1: 11}},\n      4: { \"owner\" : 0, \"next\" : { 0 : 5, 1 : 5}, role : \"hole\", \"oop\": 10, \"distobank\":  { 0: 3, 1: 10}},\n      5: { \"owner\" : 0, \"next\" : { 0 : 6, 1 : 6}, role : \"hole\", \"oop\": 9, \"distobank\":  { 0: 2, 1: 9}},\n      6: { \"owner\" : 0, \"next\" : { 0 : 7, 1 : 7}, role : \"hole\", \"oop\": 8, \"distobank\":  { 0: 1, 1: 8}},\n      7: { \"owner\" : 0, \"next\" : { 0 : 8, 1 : 8}, role : \"bank\", \"oop\": null, \"distobank\": null},\n      8: { \"owner\" : 1, \"next\" : { 0 : 9, 1 : 9}, role : \"hole\", \"oop\": 6, \"distobank\":  { 0: 12, 1: 6}},\n      9: { \"owner\" : 1, \"next\" : { 0 : 10, 1 : 10}, role : \"hole\", \"oop\": 5, \"distobank\":  { 0: 11, 1: 5}},\n      10: { \"owner\" : 1, \"next\" : { 0 : 11, 1 : 11}, role : \"hole\", \"oop\": 4, \"distobank\":  { 0: 10, 1: 4}},\n      11: { \"owner\" : 1, \"next\" : { 0 : 12, 1 : 12}, role : \"hole\", \"oop\": 3, \"distobank\":  { 0: 9, 1: 3}},\n      12: { \"owner\" : 1, \"next\" : { 0 : 13, 1 : 13}, role : \"hole\", \"oop\": 2, \"distobank\":  { 0: 8, 1: 2}},\n      13: { \"owner\" : 1, \"next\" : { 0 : 14, 1 : 14}, role : \"hole\", \"oop\": 1, \"distobank\":  { 0: 7, 1: 1}},\n      14: { \"owner\" : 1, \"next\" : { 0 : 1, 1 : 1}, role : \"bank\", \"oop\": null, \"distobank\": null }\n}\n\n// do +1\nconst all_holes = [...Array(15).keys()];\n\n\n\nconst bankStyle = {\n  padding: \"50px\",\n  margin: \"4px\",\n}\n\nfunction Turn(props) {\n  return (\n    <div className=\"turn-keeper\">\n      <h5>{props.turn} turn </h5>\n    </div>\n  );\n}\n\nfunction Bank(props) {\n  return (\n    <div>\n      <button style={bankStyle} className=\"bank\">{props.marbles}</button>\n    </div>\n  );\n}\n\n\n\n\n\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holes: Array(15).fill(0),\n      marbles_per_hole: 4,\n      hand: 48,\n      done: false,\n      isDropping: false,\n    };\n    this.turn = player\n    this.opp_turn = ai\n    this.holes_copy = JSON.parse(JSON.stringify(this.state.holes))\n    // [...this.state.holes]\n    // .slice(0)\n\n    this.hand_keeper = 48\n    this.reset_board = this.reset_board.bind(this);\n    this.isTesting = true\n\n  }\n\n  renderTurn() {\n    let turn_keeper = \"User\"\n    if (this.turn === ai) {\n      turn_keeper = \"AI's\"\n    } else {\n      turn_keeper = \"User's\"\n    }\n    return (\n      <Turn turn={turn_keeper} />\n    );\n  }\n\n  renderHole(i) {\n    return (\n      <Hole index={i} marbles={this.state.holes[i]} handleClick={ () => {\n        this.handleClick(i)\n      }}/>\n    );\n  }\n\n  renderBank(i) {\n    return (\n      <Bank index={i} marbles={this.state.holes[i]} />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"gebeta-board\">\n\n        <button className=\"start-btn\" onClick={this.start}>Start Game</button>\n        {this.renderTurn()}\n        <div className=\"ai-bank\">\n          {this.renderBank(14)}\n        </div>\n\n        <div className=\"board-r1-r2\">\n          <div className=\"board-row2\">\n          {this.renderHole(13)}\n          {this.renderHole(12)}\n          {this.renderHole(11)}\n          {this.renderHole(10)}\n          {this.renderHole(9)}\n          {this.renderHole(8)}\n          </div>\n\n           <div className=\"board-row1\">\n             {this.renderHole(1)}\n             {this.renderHole(2)}\n             {this.renderHole(3)}\n             {this.renderHole(4)}\n             {this.renderHole(5)}\n             {this.renderHole(6)}\n           </div>\n         </div>\n         <div className=\"player-bank\">\n          {this.renderBank(7)}\n         </div>\n\n      </div>\n    );\n  }\n\n\n  is_ownbank(last_hole) {\n    let count = this.holes_copy[last_hole] % 13\n    return count === h[last_hole][\"distobank\"][this.turn]\n  }\n\n\n  possible_moves_choice() {\n    let possible = []\n    for (var k = 0; k < holes[this.turn].length; k += 1) {\n      if (this.holes_copy[holes[this.turn][k]]!== 0) {\n        possible.push(holes[this.turn][k])\n      }\n    }\n    return possible\n  }\n\n  possible_moves() {\n\n    let move_list = []\n    let pmc = this.possible_moves_choice()\n    for (var i = 0; i < pmc.length; i += 1 ) {\n      move_list.push([pmc[i]])\n    }\n\n    let completed_list = []\n    this.recurse_moves(move_list, completed_list)\n    return completed_list\n\n  }\n\n  make_move_choice(i) {\n    this.scoop(i)\n\n    let cur_hole = i\n    let hand_count = this.hand_keeper\n    for (let k = 0; k < hand_count; k += 1) {\n      let next_hole = h[cur_hole][\"next\"][this.turn]\n      if (this.turn === player && next_hole === banks[ai]) {\n        next_hole = h[next_hole][\"next\"][this.turn]\n      } else if (this.turn === ai && next_hole === banks[player]) {\n        next_hole = h[next_hole][\"next\"][this.turn]\n      }\n      this.drop(next_hole, 1)\n      cur_hole = next_hole\n    }\n\n    if (h[cur_hole][\"owner\"] === this.turn ) {\n      if (this.holes_copy[cur_hole] === 1 && (cur_hole !== banks[player] && cur_hole !== banks[ai])) {\n          if (h[cur_hole][\"oop\"] !== 0) {\n            this.scoop(cur_hole)\n            this.scoop(h[cur_hole][\"oop\"])\n            this.drop_all(banks[this.turn])\n          }\n        }\n    }\n    if (!(this.isTesting)) {\n      this.setState({\n        holes: JSON.parse(JSON.stringify(this.holes_copy))\n      })\n    }\n\n  }\n\n  recurse_moves(move_list, completed_list) {\n\n    for (var i = 0; i < move_list.length; i += 1) {\n      let last_hole = move_list[i][move_list[i].length-1]\n\n      if (this.is_ownbank(last_hole)) {\n        const board_copy = JSON.parse(JSON.stringify(this.holes_copy))\n        this.make_move_choice(last_hole)\n\n        const aval_holes = this.possible_moves_choice()\n\n        if (aval_holes.length !== 0) {\n          let next_visit = []\n          for (var k = 0; k < aval_holes.length; k += 1) {\n            next_visit.push(move_list[i].concat(aval_holes[k]) )\n          }\n          this.recurse_moves(next_visit, completed_list)\n        } else {\n          completed_list.push(move_list[i])\n        }\n        this.holes_copy = JSON.parse(JSON.stringify(board_copy))\n      } else {\n        completed_list.push(move_list[i])\n      }\n    }\n  }\n\n\n\n  start = () => {\n    if (this.state.hand !== 0) {\n      this.reset_board()\n    }\n  }\n\n\n\n  minimax(move, depth, maximazing_player) {\n    if (depth === 0 || this.is_over()) {\n      return this.score()\n    }\n\n    if (maximazing_player === true) {\n      let max_score = Number.NEGATIVE_INFINITY\n      this.play_move(move, true)\n      const opp_moves = this.possible_moves()\n      const board_copy = JSON.parse(JSON.stringify(this.holes_copy))\n      for (let i = 0; i < opp_moves.length; i += 1) {\n        let eval_score = this.minimax(opp_moves[i], depth-1, false)\n        this.holes_copy = JSON.parse(JSON.stringify(board_copy))\n        this.turn = player\n        this.opp_turn = ai\n        max_score = Math.max(eval_score, max_score)\n      }\n    return max_score\n\n    } else if (maximazing_player === false) {\n      let min_score = Number.POSITIVE_INFINITY\n      this.play_move(move, true)\n      const ai_moves = this.possible_moves()\n      const board_copy = JSON.parse(JSON.stringify(this.holes_copy))\n      for (let j = 0; j < ai_moves.length; j += 1) {\n        let eval_score = this.minimax(ai_moves[j], depth-1, true)\n        this.holes_copy = JSON.parse(JSON.stringify(board_copy))\n        this.turn = ai\n        this.opp_turn = player\n        min_score = Math.min(min_score, eval_score)\n      }\n      return min_score\n    }\n  }\n\n\n  get_move() {\n    this.isTesting = true\n    let best_score = Number.NEGATIVE_INFINITY\n    let best_move = []\n    let poss_moves = this.possible_moves()\n    let board_copy = JSON.parse(JSON.stringify(this.holes_copy))\n    for (let i = 0; i < poss_moves.length; i += 1 ) {\n      let ai_score = this.minimax(poss_moves[i], 2, true)\n      this.holes_copy = JSON.parse(JSON.stringify(board_copy))\n      if (ai_score >= best_score) {\n\n        best_move = poss_moves[i]\n        best_score = ai_score\n      }\n    }\n    this.turn = ai\n    this.opp_turn = player\n    this.isTesting = false\n    return best_move\n  }\n\n\n  make_move() {\n    if (this.turn === ai) {\n      let ai_move = this.get_move()\n      this.play_move(ai_move, true)\n    }\n  }\n\n  play_move(moves, done) {\n    if(this.is_over()) {\n      alert('GAME IS OVER!');\n    }\n\n    if (done) {\n      for (let i = 0; i < moves.length; i += 1) {\n        this.make_move_choice(moves[i])\n      }\n\n      if (this.turn === ai && !(this.isTesting)) {\n      }\n\n      // if player is done making move, give turn to AI\n      if (this.turn === player) {\n        this.turn = ai\n        this.opp_turn = player\n        setTimeout(() => {\n            this.make_move()\n            this.setState({\n              holes:JSON.parse(JSON.stringify(this.holes_copy))\n            })\n          }, 2000);\n      } else if (this.turn === ai){\n        this.turn = player\n        this.opp_turn = ai\n      }\n\n    } else { // player have another turn //3\n      this.make_move_choice(moves)\n    }\n  }\n\n\n  handleClick(move) {\n    let poss_moves = this.possible_moves()\n\n    let done = false\n    this.isTesting = false\n    for (var i = 0; i < poss_moves.length; i += 1) {\n      if (move === poss_moves[i][0]) {\n        if (poss_moves[i].length === 1) {\n          done = true\n          this.play_move(poss_moves[i], done)\n        } else if (poss_moves[i].length > 1) {\n          done = false\n          this.play_move(move, done)\n          break\n        }\n      }\n    }\n  }\n\n\n  is_over() {\n    for (let i = 0; i < players.length; i += 1) {\n      let has_marbles = false\n      for (let j = 0; j < holes[players[i]].length; j += 1) {\n        if (this.holes_copy[holes[players[i]][j]] !== 0) {\n          has_marbles = true\n        }\n      }\n      if (has_marbles === false) {\n        return true\n      }\n    }\n    return false\n  }\n\n  score(playing = null) {\n    if (playing === null) {\n      playing = this.turn\n    }\n    if (playing === ai) {\n      this.turn = ai\n      this.opp_turn = player\n    } else if (playing === player) {\n      this.turn = player\n      this.opp_turn = ai\n    }\n    return this.holes_copy[banks[this.turn]] - this.holes_copy[banks[this.opp_turn]]\n  }\n\n\n  get_winner() {\n    let player_score = this.score(player)\n    let ai_score = this.score(ai)\n    if (player_score > ai_score) {\n      return \"YOU WIN\"\n    } else if (player_score < ai_score) {\n      return \"YOU LOSE\"\n    } else if (player_score === ai_score) {\n     return \"IT'S A TIE\"\n    }\n }\n\n\n  reset_board() {\n    for (let k = 0; k < all_holes.length; k += 1) {\n      if (this.holes_copy[k] !== 0) {\n        this.scoop(k)\n      }\n    }\n\n    for (let j = 0; j < players.length; j += 1) {\n      for (let k = 0; k < holes[players[j]].length; k += 1) {\n        this.drop(holes[players[j]][k], this.state.marbles_per_hole)\n      }\n    }\n\n    this.setState({\n      holes: JSON.parse(JSON.stringify(this.holes_copy)),\n      hand: this.hand_keeper\n    })\n\n  }\n\n  scoop = (i) => {\n    this.hand_keeper += this.holes_copy[i]\n    this.holes_copy[i] = 0\n  }\n\n  drop = (i, count) => {\n    this.holes_copy[i] += count\n    this.hand_keeper -= count\n  }\n\n  drop_all = (at_bank) => {\n    this.holes_copy[at_bank] += this.hand_keeper\n    this.hand_keeper = 0\n  }\n\n}\n\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"background_img\" src={process.env.PUBLIC_URL + \"/images/woodBackground.jpeg\"} alt=\"mypic\"/>\n      <img className=\"mancala_header\" src={process.env.PUBLIC_URL + \"/images/mancala_header.png\"} alt=\"mancala_header\"/>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}